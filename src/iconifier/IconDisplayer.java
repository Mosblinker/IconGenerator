/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package iconifier;

import components.BitmapDetailsCellRenderer;
import components.ComboBoxModelList;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.image4j.codec.ico.ICODecoder;
import net.sf.image4j.codec.ico.ICOImage;
import net.sf.image4j.codec.ico.IconEntry;

/**
 *
 * @author Milo Steier
 */
public class IconDisplayer extends javax.swing.JFrame {

    /**
     * Creates new form IconDisplayer
     */
    public IconDisplayer() {
        iconModel = new ComboBoxModelList<>();
        initComponents();
        propertiesTable.setDefaultRenderer(Boolean.class, new DefaultTableCellRenderer(){
            @Override
            public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                          boolean isSelected, boolean hasFocus, int row, int column) {
                return super.getTableCellRendererComponent(table,(value != null) ? value.toString() : "null",isSelected,hasFocus,row,column);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFileChooser = new javax.swing.JFileChooser();
        propertiesDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        propertiesTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        iconComboBox = new javax.swing.JComboBox<>();
        openButton = new javax.swing.JButton();
        imageLabel = new javax.swing.JLabel();
        printButton = new javax.swing.JButton();
        propertiesButton = new javax.swing.JButton();

        openFileChooser.setFileFilter(iconifier.Iconifier.ICON_FILTER);

        propertiesDialog.setMinimumSize(new java.awt.Dimension(400, 300));

        propertiesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(propertiesTable);

        javax.swing.GroupLayout propertiesDialogLayout = new javax.swing.GroupLayout(propertiesDialog.getContentPane());
        propertiesDialog.getContentPane().setLayout(propertiesDialogLayout);
        propertiesDialogLayout.setHorizontalGroup(
            propertiesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
        );
        propertiesDialogLayout.setVerticalGroup(
            propertiesDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Icon Image:");

        iconComboBox.setModel(iconModel);
        iconComboBox.setEnabled(false);
        iconComboBox.setRenderer(new BitmapDetailsCellRenderer());
        iconComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iconComboBoxActionPerformed(evt);
            }
        });

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        printButton.setText("Print");
        printButton.setEnabled(false);
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        propertiesButton.setText("Properties");
        propertiesButton.setEnabled(false);
        propertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propertiesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(iconComboBox, 0, 249, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(printButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertiesButton))
                    .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 389, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(iconComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openButton)
                    .addComponent(printButton)
                    .addComponent(propertiesButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        iconComboBox.setEnabled(false);
        printButton.setEnabled(false);
        propertiesButton.setEnabled(false);
        if (openFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
            file = openFileChooser.getSelectedFile();
            try{
                iconModel.clear();
                iconModel.addAll(ICODecoder.readExt(file));
                iconComboBox.setSelectedIndex(0);
                
                iconComboBox.setEnabled(true);
                printButton.setEnabled(true);
                propertiesButton.setEnabled(true);
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(this, "Invalid icon:\n"+ex.getMessage(), "ERROR - Invalid Icon", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(IconDisplayer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed
    
    private void setDisplayedIcon(int index){
        if (index >= 0 && index < iconModel.size()){
            currentIcon = new ImageIcon(iconModel.get(index).getImage());
        }
        else
            currentIcon = null;
        imageLabel.setIcon(currentIcon);
    }
    
    private void iconComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iconComboBoxActionPerformed
        setDisplayedIcon(iconComboBox.getSelectedIndex());
    }//GEN-LAST:event_iconComboBoxActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        for (int i = 0; i < iconModel.size(); i++)
            System.out.printf("%2d. %43s %4d x %4d %s %s %n", 
                    i, iconModel.get(i), iconModel.get(i).getWidth(), iconModel.get(i).getHeight(), iconModel.get(i).getIconEntry(), iconModel.get(i).getInfoHeader());
    }//GEN-LAST:event_printButtonActionPerformed

    private void propertiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propertiesButtonActionPerformed
        Object[][] table = new Object[iconModel.size()][15];
        for (int i = 0; i < iconModel.size(); i++){
            table[i][0] = i;
            ICOImage img = iconModel.get(i);
            table[i][1] = img.getIconIndex();
            table[i][2] = img.getWidth() + " x " + img.getHeight();
            table[i][3] = img.getColourDepth();
            table[i][4] = img.getColourCount();
            table[i][5] = img.isIndexed();
            table[i][6] = img.isPngCompressed();
            IconEntry entry = img.getIconEntry();
            table[i][7] = entry.bWidth + " x " + entry.bHeight;
            table[i][8] = entry.sBitCount;
            table[i][9] = entry.bColorCount;
            table[i][10] = entry.iFileOffset;
            table[i][11] = entry.iSizeInBytes + " Bytes";
            BufferedImage image = img.getImage();
            table[i][12] = image.getWidth() + " x " + image.getHeight();
            table[i][13] = image.getTransparency();
            table[i][14] = image.getType();
//            InfoHeader genHeader = BMPEncoder.createInfoHeader(image);
//            table[i][15] = img.getInfoHeader().equals(BMPEncoder.createInfoHeader(image));
//            table[i][16] = entry.equals(ICOEncoder.createIconEntry(genHeader));
        }
        propertiesTable.setModel(new DefaultTableModel(table,new String[]{
            "Index","Icon Image","Icon Dimensions","Color Depth",
            "Color Count","Is Indexed","Is Compressed","Entry Dimensions",
            "Entry BPP","Entry Color Count", "Entry File Offset", "Entry Size",
            "Image Dimensions", "Image Transparency", "Image Type"//,"Header = Gen Header",
            //"Entry = Gen Entry"
        }){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        });
        propertiesDialog.setVisible(true);
    }//GEN-LAST:event_propertiesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IconDisplayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IconDisplayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IconDisplayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IconDisplayer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IconDisplayer().setVisible(true);
            }
        });
    }
    
    private Icon currentIcon = null;
    private List<BufferedImage> images = null;
    private File file = null;
    private ComboBoxModelList<ICOImage> iconModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<ICOImage> iconComboBox;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openButton;
    private javax.swing.JFileChooser openFileChooser;
    private javax.swing.JButton printButton;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JDialog propertiesDialog;
    private javax.swing.JTable propertiesTable;
    // End of variables declaration//GEN-END:variables
}
